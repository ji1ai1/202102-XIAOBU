import datetime
import flask
import gc
import lightgbm
import logging
import numpy
import pandas
import pickle
import random
import requests
import sklearn
import sklearn.metrics
import time
import torch
import traceback
import transformers
import warnings
import zipfile
logging.getLogger("werkzeug").setLevel(logging.ERROR)
pandas.set_option("max.columns", 32)
pandas.set_option("max.rows", 256)
warnings.filterwarnings("ignore")



print(str(datetime.datetime.now()) + "\t開始！")

def 整理名稱(某表, 前綴=""):
	某表.columns = 前綴 + 某表.columns.get_level_values(0) + "_" + 某表.columns.get_level_values(1)
	return 某表
pandas.DataFrame.整理名稱 = 整理名稱

def 統計特征(某表, 鍵, 列, 統計函式, 前綴=""):
	return 某表.groupby(鍵).aggregate({子: 統計函式 for 子 in 列}).整理名稱(前綴).reset_index()
pandas.DataFrame.統計特征 = 統計特征

def 統計標準特征(某表, 鍵, 前綴=None):
	if not isinstance(鍵, list):
		鍵 = [鍵]
	if 前綴 is None:
		前綴 = "".join(鍵)
	某特征表 = 某表.groupby(鍵).aggregate({"標籤": ["count", "sum"]}).reset_index()
	某特征表.columns = 鍵 + ["%s樣本數" % 前綴, "%s正樣本數" % 前綴]
	某特征表["%s正樣本率" % 前綴] = (1 + 某特征表["%s正樣本數" % 前綴]) / (2 + 某特征表["%s樣本數" % 前綴])
	return 某特征表
pandas.DataFrame.統計標準特征 = 統計標準特征

def 統計測試特征(某値, 統計函式):
	if len(某値) == 0:
		return len(統計函式) * [numpy.nan]

	結果 = []
	for 甲函式 in 統計函式:
		if 甲函式 == "sum":
			結果 += [sum(某値)]
		elif 甲函式 == "mean":
			結果 += [sum(某値) / len(某値)]
		elif 甲函式 == "min":
			結果 += [min(某値)]
		elif 甲函式 == "max":
			結果 += [max(某値)]
		else:
			raise Exception("非法函式！")

	return 結果


def 取得最長公共子序列長(甲串, 乙串):
	結果 = [[0 for _ in range(1 + len(甲串))] for __ in range(1 + len(乙串))]
	for 甲 in range(1, 1 + len(乙串)):
		for 乙 in range(1, 1 + len(甲串)):
			if 乙串[甲 - 1] == 甲串[乙 - 1]:
				結果[甲][乙] = 1 + 結果[甲 - 1][乙 - 1]
			else:
				結果[甲][乙] = max(結果[甲 - 1][乙], 結果[甲][乙 - 1])
	return 結果[-1][-1]

def 取得最長公共子串長(甲串, 乙串):
	結果 = [[0 for _ in range(1 + len(甲串))] for __ in range(1 + len(乙串))]
	結果長度 = 0
	for 甲 in range(1, 1 + len(乙串)):
		for 乙 in range(1, 1 + len(甲串)):
			if 乙串[甲 - 1] == 甲串[乙 - 1]:
				結果[甲][乙] = 1 + 結果[甲 - 1][乙 - 1]
				結果長度 = max(結果長度, 結果[甲][乙])
	return 結果長度

def 取得編輯距離(甲串, 乙串):
	距離矩陣 = [[子 + 丑 for 子 in range(len(乙串) + 1)] for 丑 in range(len(甲串) + 1)]

	for 甲 in range(1, len(甲串) + 1):
		for 乙 in range(1, len(乙串) + 1):
			if 甲串[甲 - 1] == 乙串[乙 - 1]:
				距離 = 0
			else:
				距離 = 1
			距離矩陣[甲][乙] = min(距離矩陣[甲 - 1][乙] + 1, 距離矩陣[甲][乙 - 1] + 1, 距離矩陣[甲 - 1][乙 - 1] + 距離)

	return 距離矩陣[len(甲串)][len(乙串)]

def 取得預處理列(某列=None, 某上句字串=None, 某下句字串=None, 某詞字典=None):
	if 某列 is not None:
		上句 = [str(某詞字典.get(子, 1)) for 子 in 某列.上句字串.split(" ")]
		下句 = [str(某詞字典.get(子, 1)) for 子 in 某列.下句字串.split(" ")]
	else:
		上句 = [str(某詞字典.get(子, 1)) for 子 in 某上句字串.split(" ")]
		下句 = [str(某詞字典.get(子, 1)) for 子 in 某下句字串.split(" ")]

	上句詞數 = len(上句)
	下句詞數 = len(下句)

	上下首詞 = 上句[0] + "_" + 下句[0]
	上下末詞 = 上句[-1] + "_" + 下句[-1]

	上句集 = set(上句)
	下句集 = set(下句)

	上異句 = []
	上同句 = []
	上雙詞句 = []
	上三詞句 = []
	for 甲, 甲詞 in enumerate(上句):
		if 上句[甲] not in 下句集:
			上異句 += [甲詞]
		else:
			上同句 += [甲詞]
		if 甲 < len(上句) - 1:
			上雙詞句 += ["%s_%s" % (甲詞, 上句[1 + 甲])]
			if 甲 < len(上句) - 2:
				上三詞句 += ["%s_%s_%s" % (甲詞, 上句[1 + 甲], 上句[2 + 甲])]

	下異句 = []
	下同句 = []
	下雙詞句 = []
	下三詞句 = []
	for 甲, 甲詞 in enumerate(下句):
		if 下句[甲] not in 上句集:
			下異句 += [甲詞]
		else:
			下同句 += [甲詞]
		if 甲 < len(下句) - 1:
			下雙詞句 += ["%s_%s" % (甲詞, 下句[1 + 甲])]
			if 甲 < len(下句) - 2:
				下三詞句 += ["%s_%s_%s" % (甲詞, 下句[1 + 甲], 下句[2 + 甲])]

	上句首雙詞 = "0"
	下句首雙詞 = "0"
	上句末雙詞 = "0"
	下句末雙詞 = "0"
	if len(上雙詞句) > 0:
		上句首雙詞 = 上雙詞句[0]
		上句末雙詞 = 上雙詞句[-1]
	if len(下雙詞句) > 0:
		下句首雙詞 = 下雙詞句[0]
		下句末雙詞 = 下雙詞句[-1]
	上下首雙詞 = 上句首雙詞 + "_" + 上句末雙詞
	上下末雙詞 = 下句首雙詞 + "_" + 下句末雙詞


	上異句字串 = " ".join(上異句)
	下異句字串 = " ".join(下異句)
	上異句詞數 = len(上異句)
	下異句詞數 = len(下異句)

	上同句字串 = " ".join(上同句)
	下同句字串 = " ".join(下同句)
	上同句詞數 = len(上同句)
	下同句詞數 = len(下同句)

	上異句首詞 = "0"
	下異句首詞 = "0"
	上異句末詞 = "0"
	下異句末詞 = "0"
	if len(上異句) > 0:
		上異句首詞 = 上異句[0]
		上異句末詞 = 上異句[-1]
	if len(下異句) > 0:
		下異句首詞 = 下異句[0]
		下異句末詞 = 下異句[-1]
	上下異句首詞 = 上異句首詞 + "_" + 下異句首詞
	上下異句末詞 = 上異句末詞 + "_" + 下異句末詞

	上雙詞句集 = set(上雙詞句)
	下雙詞句集 = set(下雙詞句)
	上三詞句集 = set(上三詞句)
	下三詞句集 = set(下三詞句)
	上雙詞異句 = []
	下雙詞異句 = []
	上三詞異句 = []
	下三詞異句 = []
	for 甲, 甲詞 in enumerate(上雙詞句):
		if 上雙詞句[甲] not in 下雙詞句集:
			上雙詞異句 += [甲詞]
	for 甲, 甲詞 in enumerate(下雙詞句):
		if 下雙詞句[甲] not in 上雙詞句集:
			下雙詞異句 += [甲詞]
	for 甲, 甲詞 in enumerate(上三詞句):
		if 上三詞句[甲] not in 下三詞句集:
			上三詞異句 += [甲詞]
	for 甲, 甲詞 in enumerate(下三詞句):
		if 下三詞句[甲] not in 上三詞句集:
			下三詞異句 += [甲詞]

	上異句首雙詞 = "0"
	下異句首雙詞 = "0"
	上異句末雙詞 = "0"
	下異句末雙詞 = "0"
	if len(上雙詞異句) > 0:
		上異句首雙詞 = 上雙詞異句[0]
		上異句末雙詞 = 上雙詞異句[-1]
	if len(下雙詞異句) > 0:
		下異句首雙詞 = 下雙詞異句[0]
		下異句末雙詞 = 下雙詞異句[-1]
	上下異句首雙詞 = 上異句首雙詞 + "_" + 上異句末雙詞
	上下異句末雙詞 = 下異句首雙詞 + "_" + 下異句末雙詞

	上下交集 = 上句集.intersection(下句集)
	上下並集 = 上句集.union(下句集)
	上差集 = 上句集.difference(下句集)
	下差集 = 下句集.difference(上句集)

	交集詞數 = len(上下交集)
	並集詞數 = len(上下並集)
	差集詞數和 = len(上差集) + len(下差集)
	差集詞數積 = len(上差集) * len(下差集)

	for 甲 in range(min(len(上句), len(下句))):
		if 上句[甲] != 下句[甲]:
			break
	公共前綴長 = 甲
	for 甲 in range(min(len(上句), len(下句))):
		if 上句[-1 - 甲] != 下句[-1 - 甲]:
			break
	公共後綴長 = 甲

	最長公共子序列長 = 取得最長公共子序列長(上句, 下句)
	最長公共子串長 = 取得最長公共子串長(上句, 下句)
	編輯距離 = 取得編輯距離(上句, 下句)

	return [
		上句, 下句, 上句詞數, 下句詞數
		, 上下首詞, 上下末詞
		, 上異句字串, 下異句字串, 上異句, 下異句, 上異句詞數, 下異句詞數
		, 上異句首詞, 下異句首詞, 上下異句首詞, 上異句末詞, 下異句末詞, 上下異句末詞
		, 上同句字串, 下同句字串, 上同句, 下同句, 上同句詞數, 下同句詞數
		, 上雙詞句, 下雙詞句, 上雙詞異句, 下雙詞異句
		, 上下首雙詞, 上下末雙詞, 上下異句首雙詞, 上下異句末雙詞
		, 上三詞句, 下三詞句, 上三詞異句, 下三詞異句
		, 交集詞數, 並集詞數, 差集詞數和, 差集詞數積
		, 公共前綴長, 公共後綴長, 最長公共子序列長, 最長公共子串長, 編輯距離
	]

def 預處理(某表, 某詞字典):
	某表[[
		"上句", "下句", "上句詞數", "下句詞數"
		, "上下首詞", "上下末詞"
		, "上異句字串", "下異句字串", "上異句", "下異句", "上異句詞數", "下異句詞數"
		, "上異句首詞", "下異句首詞", "上下異句首詞", "上異句末詞", "下異句末詞", "上下異句末詞"
		, "上同句字串", "下同句字串", "上同句", "下同句", "上同句詞數", "下同句詞數"
		, "上雙詞句", "下雙詞句", "上雙詞異句", "下雙詞異句"
		, "上下首雙詞", "上下末雙詞", "上下異句首雙詞", "上下異句末雙詞"
		, "上三詞句", "下三詞句", "上三詞異句", "下三詞異句"
		, "交集詞數", "並集詞數", "差集詞數和", "差集詞數積"
		, "公共前綴長", "公共後綴長", "最長公共子序列長", "最長公共子串長", "編輯距離"
	]] = 某表.apply(lambda 子列: pandas.Series(取得預處理列(子列, 某詞字典=某詞字典)), axis=1)

	return 某表

with open("資料/詞字典", "rb") as 档案:
	詞字典 = pickle.load(档案)

with open("資料/特征字典", "rb") as 档案:
	上下首詞特征字典, 上下末詞特征字典, 上下異句首詞特征字典, 上下異句末詞特征字典 \
		, 句特征字典 , 異句特征字典 \
		, 詞特征字典, 交叉詞特征字典 \
		, 異句雙詞特征字典, 異句交叉雙詞特征字典 \
		, 異句三詞特征字典, 異句交叉三詞特征字典 \
		, 前後詞特征字典 \
	= pickle.load(档案)

with open("資料/輕模型", "rb") as 档案:
	輕模型 = pickle.load(档案)


def 取得測試列資料(
	某列
	, 某上下首詞特征字典, 某上下末詞特征字典, 某上下異句首詞特征字典, 某上下異句末詞特征字典
	, 某句特征字典, 某異句特征字典
	, 某詞特征字典, 某交叉詞特征字典
	, 某異句雙詞特征字典, 某異句交叉雙詞特征字典
	, 某異句三詞特征字典, 某異句交叉三詞特征字典
	, 某前後詞特征字典
):
	上句 = 某列.上句
	下句 = 某列.下句
	上異句 = 某列.上異句
	下異句 = 某列.下異句
	上雙詞異句 = 某列.上雙詞異句
	下雙詞異句 = 某列.下雙詞異句
	上三詞異句 = 某列.上三詞異句
	下三詞異句 = 某列.下三詞異句
	某資料 = [某列.交集詞數, 某列.並集詞數, 某列.差集詞數和, 某列.差集詞數積, 某列.公共前綴長, 某列.公共後綴長, 某列.最長公共子序列長, 某列.最長公共子串長, 某列.編輯距離]

	if 某列.上下首詞 in 某上下首詞特征字典:
		某上下首詞特征 = 某上下首詞特征字典[某列.上下首詞]
		某資料 += [某上下首詞特征[子] for 子 in ["上下首詞樣本數", "上下首詞正樣本數", "上下首詞正樣本率"]]
	else:
		某資料 += [0, 0, 0]
	if 某列.上下末詞 in 某上下末詞特征字典:
		某上下末詞特征 = 某上下末詞特征字典[某列.上下末詞]
		某資料 += [某上下末詞特征[子] for 子 in ["上下末詞樣本數", "上下末詞正樣本數", "上下末詞正樣本率"]]
	else:
		某資料 += [0, 0, 0]

	if 某列.上下異句首詞 in 某上下異句首詞特征字典:
		某上下異句首詞特征 = 某上下異句首詞特征字典[某列.上下異句首詞]
		某資料 += [某上下異句首詞特征[子] for 子 in ["上下異句首詞樣本數", "上下異句首詞正樣本數", "上下異句首詞正樣本率"]]
	else:
		某資料 += [0, 0, 0]
	if 某列.上下異句末詞 in 某上下異句末詞特征字典:
		某上下異句末詞特征 = 某上下異句末詞特征字典[某列.上下異句末詞]
		某資料 += [某上下異句末詞特征[子] for 子 in ["上下異句末詞樣本數", "上下異句末詞正樣本數", "上下異句末詞正樣本率"]]
	else:
		某資料 += [0, 0, 0]

	某資料 += [某列.上句詞數 + 某列.下句詞數, abs(某列.上句詞數 - 某列.下句詞數)]

	某上句特征 = 某句特征字典.get(某列.上句字串, numpy.nan)
	某下句特征 = 某句特征字典.get(某列.下句字串, numpy.nan)
	if 某上句特征 is numpy.nan and 某下句特征 is numpy.nan:
		某資料 += [0, 0, 0]
	elif 某上句特征 is numpy.nan:
		某資料 += [某下句特征[子] for 子 in ["句樣本數", "句正樣本數", "句正樣本率"]]
	elif 某下句特征 is numpy.nan:
		某資料 += [某上句特征[子] for 子 in ["句樣本數", "句正樣本數", "句正樣本率"]]
	else:
		某資料 += [max(某上句特征[子], 某下句特征[子]) for 子 in ["句樣本數", "句正樣本數", "句正樣本率"]]

	某上異句特征 = 某異句特征字典.get(某列.上異句字串, numpy.nan)
	某下異句特征 = 某異句特征字典.get(某列.下異句字串, numpy.nan)
	if 某上異句特征 is numpy.nan and 某下異句特征 is numpy.nan:
		某資料 += [0, 0, 0]
	elif 某上異句特征 is numpy.nan:
		某資料 += [某下異句特征[子] for 子 in ["異句樣本數", "異句正樣本數", "異句正樣本率"]]
	elif 某下異句特征 is numpy.nan:
		某資料 += [某上異句特征[子] for 子 in ["異句樣本數", "異句正樣本數", "異句正樣本率"]]
	else:
		某資料 += [max(某上異句特征[子], 某下異句特征[子]) for 子 in ["異句樣本數", "異句正樣本數", "異句正樣本率"]]

	某資料 += [0]

	詞特征名 = ["詞樣本數", "詞正樣本數", "詞正樣本率"]
	詞特征組 = [[] for _ in range(len(詞特征名))]
	for 甲詞 in 上句 + 下句:
		if 甲詞 not in 某詞特征字典:
			continue
		甲詞特征 = 某詞特征字典[甲詞]
		for 乙, 乙特征名 in enumerate(詞特征名):
			if not numpy.isnan(甲詞特征[乙特征名]):
				詞特征組[乙] += [甲詞特征[乙特征名]]
	某資料 += [丑 for 子 in range(len(詞特征名)) for 丑 in 統計測試特征(詞特征組[子], ["sum", "mean", "min", "max"])]

	交叉詞特征名 = ["交叉詞樣本數", "交叉詞正樣本數", "交叉詞正樣本率", "異句交叉詞樣本數", "異句交叉詞正樣本數", "異句交叉詞正樣本率", "異句交叉詞樣本數比", "異句交叉詞正樣本數比", "異句交叉詞正樣本率比"]
	交叉詞特征組 = [[] for _ in range(len(交叉詞特征名))]
	for 甲上句詞 in 上句:
		for 甲下句詞 in 下句:
			if 甲上句詞 == 甲下句詞:
				continue
			if 甲上句詞 < 甲下句詞:
				交叉詞 = (甲上句詞, 甲下句詞)
			else:
				交叉詞 = (甲下句詞, 甲上句詞)
			if 交叉詞 not in 某交叉詞特征字典:
				continue
			甲交叉詞特征 = 某交叉詞特征字典[交叉詞]
			for 乙, 乙特征名 in enumerate(交叉詞特征名):
				if not numpy.isnan(甲交叉詞特征[乙特征名]):
					交叉詞特征組[乙] += [甲交叉詞特征[乙特征名]]
	某資料 += [丑 for 子 in range(len(交叉詞特征名)) for 丑 in 統計測試特征(交叉詞特征組[子], ["sum", "mean", "min", "max"])]

	異句詞特征名 = ["異句詞樣本數", "異句詞正樣本數", "異句詞正樣本率", "異句詞樣本數比", "異句詞正樣本數比", "異句詞正樣本率比", "同句詞樣本數", "同句詞正樣本數", "同句詞正樣本率"]
	異句詞特征組 = [[] for _ in range(len(異句詞特征名))]
	for 甲異句詞 in 上異句 + 下異句:
		if 甲異句詞 not in 某詞特征字典:
			continue
		甲異句詞特征 = 某詞特征字典[甲異句詞]
		for 乙, 乙特征名 in enumerate(異句詞特征名):
			if not numpy.isnan(甲異句詞特征[乙特征名]):
				異句詞特征組[乙] += [甲異句詞特征[乙特征名]]
	某資料 += [丑 for 子 in range(len(異句詞特征名)) for 丑 in 統計測試特征(異句詞特征組[子], ["sum", "min", "max"])]

	異句交叉詞特征名 = ["異句交叉詞樣本數", "異句交叉詞正樣本數", "異句交叉詞正樣本率", "異句交叉詞樣本數比", "異句交叉詞正樣本數比", "異句交叉詞正樣本率比"]
	異句交叉詞特征組 = [[] for _ in range(len(異句交叉詞特征名))]
	for 甲上異句詞 in 上異句:
		for 甲下異句詞 in 下異句:
			if 甲上異句詞 == 甲下異句詞:
				continue
			if 甲上異句詞 < 甲下異句詞:
				異句交叉詞 = (甲上異句詞, 甲下異句詞)
			else:
				異句交叉詞 = (甲下異句詞, 甲上異句詞)
			if 異句交叉詞 not in 某交叉詞特征字典:
				continue
			甲異句交叉詞特征 = 某交叉詞特征字典[異句交叉詞]
			for 乙, 乙特征名 in enumerate(異句交叉詞特征名):
				if not numpy.isnan(甲異句交叉詞特征[乙特征名]):
					異句交叉詞特征組[乙] += [甲異句交叉詞特征[乙特征名]]
	某資料 += [丑 for 子 in range(len(異句交叉詞特征名)) for 丑 in 統計測試特征(異句交叉詞特征組[子], ["sum", "min", "max"])]

	異句雙詞特征名 = ["異句雙詞樣本數", "異句雙詞正樣本數", "異句雙詞正樣本率"]
	異句雙詞特征組 = [[] for _ in range(len(異句雙詞特征名))]
	for 甲異句雙詞 in 上雙詞異句 + 下雙詞異句:
		if 甲異句雙詞 not in 某異句雙詞特征字典:
			continue
		甲異句雙詞特征 = 某異句雙詞特征字典[甲異句雙詞]
		for 乙, 乙特征名 in enumerate(異句雙詞特征名):
			if not numpy.isnan(甲異句雙詞特征[乙特征名]):
				異句雙詞特征組[乙] += [甲異句雙詞特征[乙特征名]]
	某資料 += [丑 for 子 in range(len(異句雙詞特征名)) for 丑 in 統計測試特征(異句雙詞特征組[子], ["sum", "min", "max"])]

	異句交叉雙詞特征名 = ["異句交叉雙詞樣本數", "異句交叉雙詞正樣本數", "異句交叉雙詞正樣本率"]
	異句交叉雙詞特征組 = [[] for _ in range(len(異句交叉雙詞特征名))]
	for 甲上異句雙詞 in 上雙詞異句:
		for 甲下異句雙詞 in 下雙詞異句:
			if 甲上異句雙詞 == 甲下異句雙詞:
				continue
			if 甲上異句雙詞 < 甲下異句雙詞:
				異句交叉雙詞 = (甲上異句雙詞, 甲下異句雙詞)
			else:
				異句交叉雙詞 = (甲下異句雙詞, 甲上異句雙詞)
			if 異句交叉雙詞 not in 某異句交叉雙詞特征字典:
				continue
			甲異句交叉雙詞特征 = 某異句交叉雙詞特征字典[異句交叉雙詞]
			for 乙, 乙特征名 in enumerate(異句交叉雙詞特征名):
				if not numpy.isnan(甲異句交叉雙詞特征[乙特征名]):
					異句交叉雙詞特征組[乙] += [甲異句交叉雙詞特征[乙特征名]]
	某資料 += [丑 for 子 in range(len(異句交叉雙詞特征名)) for 丑 in 統計測試特征(異句交叉雙詞特征組[子], ["sum", "min", "max"])]

	異句三詞特征名 = ["異句三詞樣本數", "異句三詞正樣本數", "異句三詞正樣本率"]
	異句三詞特征組 = [[] for _ in range(len(異句三詞特征名))]
	for 甲異句三詞 in 上三詞異句 + 下三詞異句:
		if 甲異句三詞 not in 某異句三詞特征字典:
			continue
		甲異句三詞特征 = 某異句三詞特征字典[甲異句三詞]
		for 乙, 乙特征名 in enumerate(異句三詞特征名):
			if not numpy.isnan(甲異句三詞特征[乙特征名]):
				異句三詞特征組[乙] += [甲異句三詞特征[乙特征名]]
	某資料 += [丑 for 子 in range(len(異句三詞特征名)) for 丑 in 統計測試特征(異句三詞特征組[子], ["sum", "min", "max"])]

	異句交叉三詞特征名 = ["異句交叉三詞樣本數", "異句交叉三詞正樣本數", "異句交叉三詞正樣本率"]
	異句交叉三詞特征組 = [[] for _ in range(len(異句交叉三詞特征名))]
	for 甲上異句三詞 in 上三詞異句:
		for 甲下異句三詞 in 下三詞異句:
			if 甲上異句三詞 == 甲下異句三詞:
				continue
			if 甲上異句三詞 < 甲下異句三詞:
				異句交叉三詞 = 甲上異句三詞, 甲下異句三詞
			else:
				異句交叉三詞 = 甲下異句三詞, 甲上異句三詞
			if 異句交叉三詞 not in 某異句交叉三詞特征字典:
				continue
			甲異句交叉三詞特征 = 某異句交叉三詞特征字典[異句交叉三詞]
			for 乙, 乙特征名 in enumerate(異句交叉三詞特征名):
				if not numpy.isnan(甲異句交叉三詞特征[乙特征名]):
					異句交叉三詞特征組[乙] += [甲異句交叉三詞特征[乙特征名]]
	某資料 += [丑 for 子 in range(len(異句交叉三詞特征名)) for 丑 in 統計測試特征(異句交叉三詞特征組[子], ["sum", "min", "max"])]

	前後詞特征名 = ["前後詞樣本數", "前後詞正樣本數", "前後詞正樣本率", "前後詞樣本數比", "前後詞正樣本數比", "前後詞正樣本率比"]
	前後詞特征組 = [[] for _ in range(len(前後詞特征名))]
	for 甲前後詞 in \
		[(上句[子], 上句[丑]) for 子 in range(len(上句) - 1) for 丑 in range(1 + 子, len(上句))] \
		+ [(下句[子], 下句[丑]) for 子 in range(len(下句) - 1) for 丑 in range(1 + 子, len(下句))] \
	:
		if 甲前後詞 not in 某前後詞特征字典:
			continue
		甲前後詞特征 = 某前後詞特征字典[甲前後詞]
		for 乙, 乙特征名 in enumerate(前後詞特征名):
			if not numpy.isnan(甲前後詞特征[乙特征名]):
				前後詞特征組[乙] += [甲前後詞特征[乙特征名]]
	某資料 += [丑 for 子 in range(len(前後詞特征名)) for 丑 in 統計測試特征(前後詞特征組[子], ["sum", "max"])]

	return 某資料

def 預測(上句字串, 下句字串):
	列 = pandas.Series(dict(zip((
	"上句字串", "下句字串", "上句", "下句", "上句詞數", "下句詞數"
		, "上下首詞", "上下末詞"
		, "上異句字串", "下異句字串", "上異句", "下異句", "上異句詞數", "下異句詞數"
		, "上異句首詞", "下異句首詞", "上下異句首詞", "上異句末詞", "下異句末詞", "上下異句末詞"
		, "上同句字串", "下同句字串", "上同句", "下同句", "上同句詞數", "下同句詞數"
		, "上雙詞句", "下雙詞句", "上雙詞異句", "下雙詞異句"
		, "上下首雙詞", "上下末雙詞", "上下異句首雙詞", "上下異句末雙詞"
		, "上三詞句", "下三詞句", "上三詞異句", "下三詞異句"
		, "交集詞數", "並集詞數", "差集詞數和", "差集詞數積"
		, "公共前綴長", "公共後綴長", "最長公共子序列長", "最長公共子串長", "編輯距離"
	), [上句字串, 下句字串] + 取得預處理列(None, 上句字串, 下句字串, 詞字典))))



	甲資料 = [取得測試列資料(列
		, 上下首詞特征字典, 上下末詞特征字典, 上下異句首詞特征字典, 上下異句末詞特征字典
		, 句特征字典 , 異句特征字典
		, 詞特征字典, 交叉詞特征字典
		, 異句雙詞特征字典, 異句交叉雙詞特征字典
		, 異句三詞特征字典, 異句交叉三詞特征字典
		, 前後詞特征字典
	)]

	return 輕模型.predict(甲資料)[0]


數量 = 0
app = flask.Flask(__name__)
@app.route("/tccapi", methods=['GET', 'POST'])
def tccapi():
	輸入 = flask.request.form.getlist("input")
	索引 = flask.request.form.getlist("index")

	回應 = {}
	回應["results"] = []
	for 甲, 甲輸入 in enumerate(輸入):
		global 數量
		數量 += 1
		if 數量 % 5000 == 0:
			print(str(datetime.datetime.now()) + "\t%s" % 數量)
		甲回應 = {}
		try:
			甲輸入分割 = 甲輸入.strip().split("\t")
			上句字串 = 甲輸入分割[0].strip()
			下句字串 = 甲輸入分割[1].strip()
			甲回應["predict"] = 預測(上句字串, 下句字串)
			甲回應["index"] = 索引[甲]
			甲回應["ok"] = True
		except Exception as 異常:
			traceback.print_exc()
			甲回應["predict"] = 0
			甲回應["index"] = 索引[甲]
			甲回應["ok"] = False
		回應["results"].append(甲回應)

	return 回應

print(str(datetime.datetime.now()) + "\t預測開始！")
app.run(host="127.0.0.1", port=8080)
print(str(datetime.datetime.now()) + "\t預測結束！")
